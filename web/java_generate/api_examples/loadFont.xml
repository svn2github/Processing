<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>loadFont()</name>

<category>Typography</category>

<subcategory>Loading &amp; Displaying</subcategory>

<usage>Web &amp; Application</usage>

<example>
<image>loadFont_.gif</image>
<code><![CDATA[
PFont font;
// The font must be located in the sketch's 
// "data" directory to load successfully
font = loadFont("FFScala-32.vlw"); 
textFont(font, 32); 
text("word", 15, 50); 
]]></code>
</example>

<description><![CDATA[
Loads a font into a variable of type <b>PFont</b>. To load correctly, fonts must be located in the data directory of the current sketch. To create a font to use with Processing, select "Create Font..." from the Tools menu. This will create a font in the format Processing requires and also adds it to the current sketch's data directory. 
<br/> <br/>
Like loadImage() and other methods that load data, the loadFont() command should not be used inside draw(), because it will slow down the sketch considerably, as the font will be re-loaded from the disk (or network) on each frame.
<br/> <br/>
For most renderers, Processing displays fonts using the .vlw font format, which uses images for each letter, rather than defining them through vector data. When hint(ENABLE_NATIVE_FONTS) is used with the JAVA2D renderer, the native version of a font will be used if it is installed on the user's machine. 
<br/> <br/>
Using createFont() (instead of loadFont) enables vector data to be used with the JAVA2D (default) renderer setting. This can be helpful when many font sizes are needed, or when using any renderer based on JAVA2D, such as the PDF library. 
]]></description>

<syntax><![CDATA[
loadFont(<kbd>fontname</kbd>)
]]></syntax>

<parameter>
<label>fontname</label>
<description><![CDATA[string: name of the font to load]]></description>
</parameter>

<returns>PFont</returns>

<related>
PFont 
textFont() 
text() 
createFont()
</related>

<availability>1.0</availability>

<type>Function</type>

<partof>Core</partof>








</root>
