<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>createGraphics()</name>

<category>Rendering</category>

<subcategory></subcategory>

<type></type>

<example>
<image></image>
<code><![CDATA[
PGraphics pg;

void setup() {
  size(200, 200);
  pg = createGraphics(100, 100);
}

void draw() {
  pg.beginDraw();
  pg.background(102);
  pg.stroke(255);
  pg.line(pg.width*0.5, pg.height*0.5, mouseX, mouseY);
  pg.endDraw();
  image(pg, 50, 50); 
}
]]></code>
</example>

<description><![CDATA[
Creates and returns a new <b>PGraphics</b> object. Use this class if you need to draw into an off-screen graphics buffer. The first two parameters define the width and height in pixels. The third, optional parameter specifies the renderer. It can be defined as P2D, P3D, or PDF. If the third parameter isn't used, the default renderer is set. The PDF renderer requires the filename parameter.<br /> 
<br />
It's important to match the renderer used with <b>createGraphics()</b> to the main renderer specified in <b>size()</b>. If the default renderer is used in <b>size()</b>, then only the default or PDF can be used with <b>createGraphics()</b>. If P2D or P3D are used as the renderer in <b>size()</b>, then any of the options can be used with <b>createGraphics()</b>.<br />
<br />
It's important to call any drawing functions between <b>beginDraw()</b> and <b>endDraw()</b> statements. This is also true for any functions that affect drawing, such as <b>smooth()</b> or <b>colorMode()</b>.<br/> 
<br/>
Unlike the main drawing surface which is completely opaque, surfaces created with <b>createGraphics()</b> can have transparency. This makes it possible to draw into a graphics and maintain the alpha channel. By using <b>save()</b> to write a PNG or TGA file, the transparency of the graphics object will be honored.
]]></description>

</root>
