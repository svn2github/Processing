<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>Serial</name>

<category>Net</category>

<subcategory></subcategory>

<usage>Application</usage>

<example>
<image></image>
<code>
// Example by Tom Igoe

import processing.serial.*;

// The serial port:
Serial myPort;       

// List all the available serial ports:
println(Serial.list());

/*  I know that the first port in the serial list on my mac
is always my  Keyspan adaptor, so I open Serial.list()[0].
Open whatever port is the one you're using.
*/
myPort = new Serial(this, Serial.list()[0], 9600);
  
// Send a capital A out the serial port:
myPort.write(65);

</code>
</example>

<description>
Class for sending and receiving data using the serial communication protocol.
</description>

<syntax>
</syntax>

<parameters>
</parameters>


<method>
<mname>available()</mname>
<mdescription>Returns the number of bytes in the buffer waiting to be read</mdescription>
</method>

<method>
<mname>read()</mname>
<mdescription>Returns the next byte from the buffer</mdescription>
</method>

<method>
<mname>readChar()</mname>
<mdescription>Returns the next byte in the buffer as a char</mdescription>
</method>

<method>
<mname>readBytes()</mname>
<mdescription>Reads everything in the buffer</mdescription>
</method>

<method>
<mname>readBytesUntil()</mname>
<mdescription>Reads from the buffer of bytes up to and including a particular character</mdescription>
</method>

<method>
<mname>readString()</mname>
<mdescription>Returns the buffer as a String</mdescription>
</method>

<method>
<mname>readStringUntil()</mname>
<mdescription>Returns the buffer as a String up to and including a particular character</mdescription>
</method>

<method>
<mname>buffer()</mname>
<mdescription>Sets the number of bytes to buffer before calling serialEvent()</mdescription>
</method>

<method>
<mname>bufferUntil()</mname>
<mdescription>Sets a specific byte to buffer to before calling serialEvent</mdescription>
</method>

<method>
<mname>last()</mname>
<mdescription>Returns last byte received</mdescription>
</method>

<method>
<mname>lastChar()</mname>
<mdescription>Returns the last byte received as a char</mdescription>
</method>

<method>
<mname>write()</mname>
<mdescription>Writes bytes, chars, ints, bytes[], Strings</mdescription>
</method>

<method>
<mname>clear()</mname>
<mdescription>Clears the buffer</mdescription>
</method>

<method>
<mname>stop()</mname>
<mdescription>Stops communicating</mdescription>
</method>

<method>
<mname>list()</mname>
<mdescription>Returns the available ports</mdescription>
</method>


<constructor>
Serial(<c>parent</c>)
Serial(<c>parent</c>, <c>rate</c>)
Serial(<c>parent</c>, <c>name</c>)
Serial(<c>parent</c>, <c>name</c>, <c>rate</c>)
Serial(<c>parent</c>, <c>name</c>, <c>rate</c>, <c>parity</c>, <c>databits</c>, <c>stopbits</c>)

</constructor>

<cparameter>
<clabel>parent</clabel>
<cdescription>PApplet: typically use "this"</cdescription>
</cparameter>

<cparameter>
<clabel>rate</clabel>
<cdescription>int: 9600 is the default</cdescription>
</cparameter>

<cparameter>
<clabel>name</clabel>
<cdescription>String: name of the port (COM1 is the default)</cdescription>
</cparameter>

<cparameter>
<clabel>parity</clabel>
<cdescription>char: 'N' for none, 'E' for even, 'O' for odd ('N' is the default)</cdescription>
</cparameter>

<cparameter>
<clabel>databits</clabel>
<cdescription>int: 8 is the default</cdescription>
</cparameter>

<cparameter>
<clabel>stopbits</clabel>
<cdescription>float: 1.0, 1.5, or 2.0 (1.0 is the default)</cdescription>
</cparameter>



<returns></returns>

<related>
</related>

<availability>1.0</availability>

<type>Object</type>

<partof>Library</partof>










</root>
