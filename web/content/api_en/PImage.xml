<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>PImage</name>

<category>Image</category>

<subcategory>PImage</subcategory>

<usage>Web &amp; Application</usage>

<example>
<image>PImage.jpg</image>
<code>
PImage b;
b = loadImage("laDefense.jpg");
image(b, 0, 0);
</code>
</example>

<description>
Datatype for storing images. Processing can display <b>.gif</b>, <b>.jpg</b>, <b>.tga</b>, and <b>.png</b> images. Images may be displayed in 2D and 3D space. Before an image is used, it must be loaded with the <b>loadImage()</b> function. The <b>PImage</b> object contains fields for the <b>width</b> and <b>height</b> of the image, as well as an array called <b>pixels[]</b> which contains the values for every pixel in the image. A group of methods, described below, allow easy access to the image's pixels and alpha channel and simplify the process of compositing. 
<br/> <br/>
Before using the <b>pixels[]</b> array, be sure to use the <b>loadPixels()</b> method on the image to make sure that the pixel data is properly loaded.
<br/> <br/>
To create a new image, use the <b>createImage()</b> function (do not use <b>new PImage()</b>). 
</description>

<syntax>
</syntax>

<parameters>
</parameters>

<field>
<fname>width</fname>
<fdescription>Image width</fdescription>
</field>

<field>
<fname>height</fname>
<fdescription>Image height</fdescription>
</field>

<field>
<fname>pixels[]</fname>
<fdescription>Array containing the color of every pixel in the image</fdescription>
</field>

<method>
<mname>get()</mname>
<mdescription>Reads the color of any pixel or grabs a rectangle of pixels</mdescription>
</method>
<method>
<mname>set()</mname>
<mdescription>Writes a color to any pixel or writes an image into another</mdescription>
</method>
<method>
<mname>copy()</mname>
<mdescription>Copies the entire image</mdescription>
</method>
<method>
<mname>mask()</mname>
<mdescription>Masks part of the image from displaying</mdescription>
</method>
<method>
<mname>blend()</mname>
<mdescription>Copies a pixel or rectangle of pixels using different blending modes</mdescription>
</method>
<method>
<mname>filter()</mname>
<mdescription>Converts the image to grayscale or black and white</mdescription>
</method>
<method>
<mname>save()</mname>
<mdescription>Saves the image to a TIFF, TARGA, PNG, or JPEG file</mdescription>
</method>
<method>
<mname>resize()</mname>
<mdescription>Changes the size of an image to a new width and height</mdescription>
</method>
<method>
<mname>loadPixels()</mname>
<mdescription>Loads the pixel data for the image into its pixels[] array</mdescription>
</method>
<method>
<mname>updatePixels()</mname>
<mdescription>Updates the image with the data in its pixels[] array</mdescription>
</method>

<constructor>
PImage()
PImage(<c>width</c>, <c>height</c>)
PImage(<c>width</c>, <c>height</c>, <c>format</c>)
PImage(<c>img</c>)
</constructor>

<cparameter>
<clabel>width</clabel>
<cdescription>int: image width</cdescription>
</cparameter>

<cparameter>
<clabel>height</clabel>
<cdescription>int: image height</cdescription>
</cparameter>

<cparameter>
<clabel>format</clabel>
<cdescription>Either RGB, ARGB, ALPHA (grayscale alpha channel)</cdescription>
</cparameter>

<cparameter>
<clabel>img</clabel>
<cdescription>java.awt.Image: assumes a MediaTracker has been used to fully download the data and the img is valid</cdescription>
</cparameter>


<returns></returns>

<related>
loadImage()
imageMode()
createImage()
</related>

<availability>1.0</availability>

<type>Object</type>

<partof>Core</partof>


</root>
