<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>resize()</name>

<category>PImage</category>

<subcategory>Method</subcategory>

<usage>Web &amp; Application</usage>

<example>
<image>PImage_resize.jpg</image>
<code><![CDATA[
PImage img = loadImage("jelly.jpg");
image(img, 0, 0);
img.resize(100, 50);
image(img, 0, 0);
]]></code>
</example>

<example>
<image>PImage_resize_2.jpg</image>
<code><![CDATA[
PImage img = loadImage("jelly.jpg");
image(img, 0, 0);
img.resize(0, 50);
image(img, 0, 0);
]]></code>
</example>

<description><![CDATA[
Resize the image to a new width and height. To make the image scale proportionally, use 0 as the value for the <b>wide</b> or <b>high</b> parameter. For instance, to make the width of an image 150 pixels, and change the height using the same proportion, use resize(150, 0).
<br /> <br />
Even though a PGraphics is technically a PImage, it is not possible to rescale the image data found in a PGraphics. (It's simply not possible to do this consistently across renderers: technically infeasible with OpenGL, or what would it even do with PDF?) If you want to resize PGraphics content, first get a copy of its image data using the get() method, and call resize() on the PImage that is returned.
]]></description>

<syntax>
<c>img</c>.resize(<c>wide</c>, <c>high</c>)
</syntax>

<parameter>
<label>img</label>
<description><![CDATA[PImage: any variable of type PImage]]></description>
</parameter>

<parameter>
<label>wide</label>
<description><![CDATA[int: the resized image width]]></description>
</parameter>

<parameter>
<label>high</label>
<description><![CDATA[int: the resized image height]]></description>
</parameter>

<returns>void</returns>

<related>
get()
</related>

<availability>1.0</availability>

<type>Method</type>

<partof>Core</partof>








</root>
