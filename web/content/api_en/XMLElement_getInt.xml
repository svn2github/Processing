<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>

<name>getInt()</name>

<category>XMLElement</category>

<subcategory>Method</subcategory>

<usage>Web &amp; Application</usage>

<example>
<image></image>
<code><![CDATA[
// The following short XML file called "sites.xml" is parsed 
// in the code below. It must be in the project's "data" directory
// &#60;?xml version="1.0"?&#62;
// &#60;websites&#62;
//   &#60;site id="0" url="processing.org"&#62;Processing&#60;/site&#62;
//   &#60;site id="1" url="mobile.processing.org"&#62;Processing Mobile&#60;/site&#62;
// &#60;/websites&#62;

XMLElement xml;

void setup() {
  size(200, 200);
  xml = new XMLElement(this, "sites.xml");
  int numSites = xml.getChildCount();
  for (int i = 0; i &lt; numSites; i++) {
    XMLElement kid = xml.getChild(i);
    int id = kid.getInt("id"); 
    String url = kid.getString("url"); 
    String site = kid.getContent();
    println(id + " : " + url + " : " + site);    
  }
}

]]></code>
</example>

<description>
Returns an integer attribute of the element. If the <b>default</b> parameter is used and the attribute doesn't exist, the <b>default</b> value is returned. When using the version of the method without the <b>default</b> parameter, if the attribute doesn't exist, the value 0 is returned. 
</description>

<syntax>
<c>xml</c>.getInt(<c>name</c>)
<c>xml</c>.getInt(<c>name</c>, <c>default</c>)
</syntax>

<parameter>
<label>xml</label>
<description>any variable of type XMLElement</description>
</parameter>

<parameter>
<label>name</label>
<description>String: the name of the attribute</description>
</parameter>

<parameter>
<label>default</label>
<description>int: value returned if the attribute is not found</description>
</parameter>

<returns>int</returns>

<related></related>

<availability>1.0</availability>

<type>Method</type>

<partof>Core</partof>

<level>Extended</level>


</root>
