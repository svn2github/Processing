<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>Client</name>

<category>Net</category>

<subcategory></subcategory>

<usage>Application</usage>

<example>
<image></image>
<code><![CDATA[
import processing.net.*; 
Client myClient; 
int dataIn; 
 
void setup() { 
  size(200, 200); 
  // Connect to the local machine at port 5204.
  // This example will not run if you haven't
  // previously started a server on this port
  myClient = new Client(this, "127.0.0.1", 5204); 
} 
 
void draw() { 
  if (myClient.available() &gt; 0) { 
    dataIn = myClient.read(); 
  } 
  background(dataIn); 
} 

]]></code>
</example>

<description><![CDATA[
A client connects to a server and sends data back and forth. If anything goes wrong with the connection, for example the host is not there or is listening on a different port, an exception is thrown.
]]></description>

<syntax>
</syntax>

<parameters>
</parameters>


<method>
<mname>available()</mname>
<mdescription>Returns the number of bytes in the buffer waiting to be read</mdescription>
</method>

<method>
<mname>read()</mname>
<mdescription>Returns a value from the buffer</mdescription>
</method>

<method>
<mname>readChar()</mname>
<mdescription>Returns the next byte in the buffer as a char</mdescription>
</method>

<method>
<mname>readBytes()</mname>
<mdescription>Reads everything in the buffer</mdescription>
</method>

<method>
<mname>readBytesUntil()</mname>
<mdescription>Reads from the buffer of bytes up to and including a particular character</mdescription>
</method>

<method>
<mname>readString()</mname>
<mdescription>Returns the buffer as a String</mdescription>
</method>

<method>
<mname>readStringUntil()</mname>
<mdescription>Returns the buffer as a String up to and including a particular character</mdescription>
</method>

<method>
<mname>write()</mname>
<mdescription>Writes bytes, chars, ints, bytes[], Strings</mdescription>
</method>

<method>
<mname>clear()</mname>
<mdescription>Clears the buffer</mdescription>
</method>

<method>
<mname>stop()</mname>
<mdescription>Disconnects from the server</mdescription>
</method>

<method>
<mname>ip()</mname>
<mdescription>Returns the IP address of the machine as a String</mdescription>
</method>


<constructor>
Client(<c>parent</c>, <c>host</c>, <c>port</c>)
Client(<c>parent</c>, <c>socket</c>)
</constructor>

<cparameter>
<clabel>parent</clabel>
<cdescription>PApplet: typically use "this"</cdescription>
</cparameter>

<cparameter>
<clabel>host</clabel>
<cdescription>String: address of the server</cdescription>
</cparameter>

<cparameter>
<clabel>port</clabel>
<cdescription>int: port to read/write from on the server</cdescription>
</cparameter>

<cparameter>
<clabel>socket</clabel>
<cdescription>Socket: </cdescription>
</cparameter>

<returns></returns>

<related>
</related>

<availability>1.0</availability>

<type>Object</type>

<partof>Library</partof>

</root>
