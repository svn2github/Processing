<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>point()</name>

<category>Shape</category>

<subcategory>2D Primitives</subcategory>

<usage>Web &amp; Application</usage>

<example>
<image>point_.gif</image>
<code><![CDATA[
point(30, 20);
point(85, 20);
point(85, 75);
point(30, 75);
]]></code>
</example>

<example>
<image>point_2.gif</image>
<code><![CDATA[
size(100, 100, P3D);
point(30, 20, -50);
point(85, 20, -50);
point(85, 75, -50);
point(30, 75, -50);
]]></code>
</example>

<description><![CDATA[
Draws a point, a coordinate in space at the dimension of one pixel. The first parameter is the horizontal value for the point, the second value is the vertical value for the point, and the optional third value is the depth value. Drawing this shape in 3D using the <b>z</b> parameter requires the P3D or OPENGL parameter in combination with size as shown in the above example. 
<br/> <br/>
Due to what appears to be a bug in Apple's Java implementation, the point() and set() methods are extremely slow in some circumstances when used with the default renderer. Using P2D or P3D will fix the problem. Grouping many calls to point() or set() together can also help. (<a href="http://dev.processing.org/bugs/show_bug.cgi?id=1094">Bug 1094</a>)
]]></description>

<syntax>
point(<c>x</c>, <c>y</c>)
point(<c>x</c>, <c>y</c>, <c>z</c>)
</syntax>

<parameter>
<label>x</label>
<description><![CDATA[int or float: x-coordinate of the point]]></description>
</parameter>

<parameter>
<label>y</label>
<description><![CDATA[int or float: y-coordinate of the point]]></description>
</parameter>

<parameter>
<label>z</label>
<description><![CDATA[int or float: z-coordinate of the point]]></description>
</parameter>

<returns>None</returns>

<related>
beginShape()
</related>

<availability>1.0</availability>

<type>Function</type>

<partof>Core</partof>








</root>
