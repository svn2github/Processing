<?xml version="1.0" encoding="ISO-8859-9" standalone="yes"?>
<root>
<name>noise()</name>

<category>Matematik</category>

<subcategory>Rasgele</subcategory>

<usage>Web &amp; Uygulama</usage>

<example>
<image>noise_.jar</image>
<code>
float xoff = 0.0;
void loop() 
{
  background(204);
  xoff = xoff + .01;
  float n = noise(xoff) * width;
  line(n, 0, n, height);
}
</code>
</example>

<example>
<image>noise_2.jar</image>
<code>
float noiseScale=0.02;
void loop() {
  background(0);
  for(int x=0; x&lt;width; x++) {
    float noiseVal = noise((mouseX+x)*noiseScale, 
                            mouseY*noiseScale);
    stroke(noiseVal*255);
    line(x, mouseY+noiseVal*80, x, height);
  }
}
</code>
</example>

<description>
Belirli koordinatlarda Perlin gürültüsü döndürür. Perlin gürültüsü standart <b>random()</b> fonksiyonuna göre daha doðal dizimli ve ahenkli rasgele birbirini izleyen diziler üretir. 1980'de Ken Perlin tarafýndan icat edilmiþtir ve grafik uygulamalarda doku, doðal hareket, þekiller ve arazi v.s. üretmek için kullanýlmaktadýr.<br/><br/><b>random()</b> fonksiyonundan ana farký Perlin gürültüsünün her koordinatý sabitleþmiþ (programýn ömrü kadar sabit) kismi rasgele deðerlere baðlý sonsuz n boyutlu bir boþlukta tanýmlanmasýdýr. Sonuç deðer her zaman 0.0 ile 1.0 arasýndadýr. Processing verilen koordinat sayýsýna göre tek boyutlu, iki boyutlu ve üç boyutlu gürültü hesaplayabilir. Gürültü deðeri yukardaki örnekte gösterildiði gibi gürültü uzamýnda hareket ettirilerek anime edilebilir. Ýkinci ve üçüncü boyut zaman olarak da yorumlanabilir.<br/><br/>Asýl gürültü fonksiyonun frekans kullanýmýyla iligli olarak ses sinyali gibi yapýlandýrýlmýþtýr. Perlin gürültüsü fizikteki harmonilere benzer bir þekilde çeþitli oktavlar üzerinden hesaplanýp birbirine eklenerek sonuç yaratýr.<br/><br/>Sonuç dizinin karakterini ayarlamanýn baþka bir yolu da giren koordýnarlarýn boyutlarýdýr. Fonksiyon sonsuz boþlukta calýþtýðý için koordinat deðerleri önemsizdir, sadece koordinatlar arasý uzaklýk önemlidir(örneðin <b>noise()</b> fonksiyonunu bir döngü içinde kullanýrken). Genel bir kural olarak, koordinatlar arasýndaki fark küçük oldukça sonuç gürültü dizisi daha yumuþak olacaktýr. 0.005-0.03 adýmlarý bir çok uygulama için en iyi sonucu verir, ama bu kullanýma göre deðiþir.
</description>

<syntax>
noise(<c>x</c>)
noise(<c>x</c>, <c>y</c>)
noise(<c>x</c>, <c>y</c>, <c>z</c>)
</syntax>

<parameter>
<label>x</label>
<description>float: gürültü uzayýnda x koordinatý</description>
</parameter>

<parameter>
<label>y</label>
<description>float: gürültü uzayýnda y koordinatý</description>
</parameter>

<parameter>
<label>z</label>
<description>float: gürültü uzayýnda z koordinatý</description>
</parameter>

<returns>float</returns>

<related>
random()
noiseDetail()
</related>

<availability>1.0</availability>

<type>Function</type>

<partof>Bagel</partof>








</root>