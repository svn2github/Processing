<?xml version="1.0" encoding="UTF-8"?>

<!-- base dir set to parent of mobile directory, i.e:
     parent <- basedir
        mobile
            build
                macosx
        processing
        
     processing will be checked out into the parent directory, if it doesn't exist -->     
<project name="mobile" default="dist" basedir="..\..\..">

    <!-- first try to read customized properties -->
    <property file="build.properties"/>
    <!-- otherwise, read default properties from build directory-->
    <property file="mobile/build/macosx/build.properties"/>

    <!-- init should always be the first target in a dependency list, it sets up
         properties necessary for things to work correctly. -->
    <target name="init">
        <!-- Check if processing has been checked out and set property accordingly-->
        <available property="ischeckedout" file="processing" type="dir"/>        
        <!-- Check if processing has been built at least once -->
        <available property="isbuilt" file="processing/build/macosx/work" type="dir"/>        
    </target>
       
    <!-- checks out a tagged copy of processing if it hasn't been done so already. -->
    <target name="checkout" depends="init" unless="ischeckedout">
        <!-- perform the svn checkout to get clean files. -->
        <exec executable="/bin/bash">
            <arg value="--login"/>
            <arg value="-c"/>
            <arg value="cd ${parent.dir}; svn checkout svn://processing.org/tags/${svn.tag.processing} processing"/>
        </exec>
    </target>
    
    <!-- gets unmodified tagged source files back into the processing app directory. -->
    <target name="revert" depends="init, checkout">
        <!-- perform the cvs update to get clean files. -->
        <exec executable="/bin/bash">
            <arg value="--login"/>
            <arg value="-c"/>
            <arg value="cd ${parent.dir}/processing/app; svn revert ."/>
        </exec>
    </target>
    
    <!-- cleans up temporary files -->
    <target name="clean" depends="init">
        <delete dir="mobile/build/macosx/classes" failonerror="false"/>
        <delete dir="mobile/build/macosx/preverified" failonerror="false"/>
        <delete failonerror="false">
            <fileset dir="mobile/build/macosx" includes="*.jar"/>
        </delete>
    </target>
    
    <!-- copy app source files from mobile into corresponding directory in processing. -->
    <target name="copyappsrc" depends="checkout">
        <copy todir="processing/app" overwrite="true">
            <fileset dir="mobile/app">
                <include name="**/*.java"/>
            </fileset>            
        </copy>
        <copy todir="processing/core" overwrite="true">
            <fileset dir="mobile/appcore">
                <include name="**/*.java"/>
            </fileset>            
        </copy>
    </target>
    
    <!-- if processing not built for the first time yet, copy files to update launcher executable -->
    <target name="copylaunchersrc" depends="checkout" unless="isbuilt">
        <!-- copy icons for application -->
        <copy todir="processing/build/macosx/dist/Processing.app/Contents/Resources" overwrite="true">
            <fileset dir="mobile/build/macosx/dist/Processing.app/Contents/Resources">
                <include name="**/*.icns"/>
            </fileset>
        </copy>
        <!-- copy icons for application -->
        <copy todir="processing/build/shared/lib" overwrite="true">
            <fileset dir="mobile/build/shared/lib">
                <include name="**/*.gif"/>
            </fileset>
        </copy>
    </target>

    <target name="make" depends="init, copyappsrc, copylaunchersrc">        
        <!-- execute make.sh shell script in processing build dir. -->
        <exec executable="/bin/bash">
            <arg value="--login"/>
            <arg value="-c"/>
            <arg value="cd ${parent.dir}/processing/build/macosx; ./make.sh"/>
        </exec>
        <antcall target="copycore">
            <param name="target" value="work"/>
        </antcall>
<!--        
        <antcall target="copylibs">
            <param name="target" value="work"/>
        </antcall>
-->
    </target>

    <target name="dist" depends="init, copyappsrc, copylaunchersrc">        
        <!-- execute dist.sh shell script in processing build dir. -->
        <exec executable="/bin/bash">
            <arg value="--login"/>
            <arg value="-c"/>
            <arg value="cd ${parent.dir}/processing/build/macosx; ./dist.sh"/>
        </exec>
        <!-- delete the zip files- we need to copy our stuff in and re-zip -->
        <delete file="processing/build/macosx/${svn.tag.processing}.zip"/>
        <!-- copy into standard release -->
        <antcall target="copycore">
            <param name="target" value="${svn.tag.processing}"/>
        </antcall>
        <antcall target="copylibs">
            <param name="target" value="${svn.tag.processing}"/>
        </antcall>
    </target>
    
    <target name="run" depends="init">
        <!-- execute run.sh shell script in processing build dir. -->
        <exec executable="/bin/bash">
            <arg value="--login"/>
            <arg value="-c"/>
            <arg value="cd ${parent.dir}/processing/build/macosx; ./run.sh"/>
        </exec>
    </target>

    <!-- builds the mobile core files and packages them up for inclusion with processing ide-->
    <target name="makecore" depends="init">
        <!-- compile core source files into a temporary directory -->
        <mkdir dir="mobile/build/macosx/classes/core"/>
        <javac srcdir="mobile/core/processing/core"
               destdir="mobile/build/macosx/classes/core"
               bootclasspath="${wtk.bootClassPath}"
               source="1.3"
               target="1.1"/>
        <!-- preverify compiled classes into another temporary directory -->
        <mkdir dir="mobile/build/macosx/preverified/core"/>
        <exec executable="${wtk.dir}/osx/preverify/preverify">
            <arg value="-classpath"/>
            <arg path="${wtk.bootClassPath}"/>
            <arg value="-d"/>
            <arg path="mobile/build/macosx/preverified/core"/>
            <arg path="mobile/build/macosx/classes/core"/>
        </exec>
        <!-- pack preverified classes into jar -->
        <jar destfile="mobile/build/macosx/mobile.jar" basedir="mobile/build/macosx/preverified/core">
            <include name="**/*.class"/>
        </jar>
    </target>
    
    <!-- copies core jar and manifest/jad template into processing ide build -->
    <target name="copycore" depends="makecore">
        <!-- default target is work folder, can be overridden by call -->
        <property name="target" value="work"/>
        <!-- copy jar and jad/manifest template into processing build -->
        <copy file="mobile/build/shared/lib/mobile.mf" todir="processing/build/macosx/${target}/lib"/>
        <copy file="mobile/build/macosx/mobile.jar" todir="processing/build/macosx/${target}/lib"/>
        <!-- copy proguard jar and its configuration file into processing lib -->
        <copy file="mobile/build/shared/lib/proguard.jar" todir="processing/build/macosx/${target}/lib"/>
        <copy file="mobile/build/shared/lib/proguard.pro" todir="processing/build/macosx/${target}/lib"/>        
    </target>

    <target name="compile">
        <mkdir dir="${dest}"/>
        <javac srcdir="${src}"
               destdir="${dest}"
               bootclasspath="${bootClassPath}"
               classpath="${classPath}"
               source="1.3"
               target="1.1"/>
    </target>
    
    <target name="preverify">
        <mkdir dir="${dest}"/>
        <exec executable="${wtk.dir}/osx/preverify/preverify">
            <arg value="-classpath"/>
            <arg path="${bootClassPath};${classPath}"/>
            <arg value="-d"/>
            <arg path="${dest}"/>
            <arg path="${src}"/>
        </exec>
    </target>
    
    <target name="jar">
        <mkdir dir="${dest}"/>
        <jar destfile="${dest}/${jarname}" basedir="${src}">
            <include name="**/*.class"/>
        </jar>
    </target>
    
    <target name="makelib">
        <antcall target="compile">
            <param name="src" value="mobile/${libname}/processing/${libname}"/>
            <param name="dest" value="mobile/build/macosx/classes/${libname}"/>
            <param name="bootClassPath" value="${bootClassPath}"/>
            <param name="classPath" value="${classPath}"/>
        </antcall>
        <!-- preverify compiled classes into another temporary directory -->
        <antcall target="preverify">
            <param name="src" value="mobile/build/macosx/classes/${libname}"/>
            <param name="dest" value="mobile/build/macosx/preverified/${libname}"/>
            <param name="bootClassPath" value="${bootClassPath}"/>
            <param name="classPath" value="${classPath}"/>
            <param name="cldc" value="${cldc}"/>
        </antcall>
        <!-- pack preverified classes into jar -->
        <antcall target="jar">
            <param name="src" value="mobile/build/macosx/preverified/${libname}"/>
            <param name="dest" value="mobile/${libname}/library"/>
            <param name="jarname" value="${libname}.jar"/>
        </antcall>
    </target>
        
    <!-- makes core libraries -->
    <target name="makelibs" depends="init">
        <!-- first, net library -->
        <antcall target="makelib">
            <param name="libname" value="net"/>
            <param name="bootClassPath" value="${wtk.bootClassPath}"/>
            <param name="classPath" value=""/>
            <param name="cldc" value="CLDC1.0"/>
        </antcall>
        <!-- next, sound library -->
        <antcall target="makelib">
            <param name="libname" value="sound"/>
            <param name="bootClassPath" value="${wtk.bootClassPath}"/>
            <param name="classPath" value="${wtk.dir}/lib/mmapi.jar"/>
            <param name="cldc" value="CLDC1.0"/>
        </antcall>
        <!-- next, handset library -->
        <antcall target="makelib">
            <param name="libname" value="handset"/>
            <param name="bootClassPath" value="${wtk.bootClassPath}"/>
            <param name="classPath" value=""/>
            <param name="cldc" value="CLDC1.0"/>
        </antcall>
    </target>

    <target name="copylib">
        <mkdir dir="processing/build/macosx/${target}/libraries/${libname}"/>
        <copy todir="processing/build/macosx/${target}/libraries/${libname}">
            <fileset dir="mobile/${libname}"/>
        </copy>
    </target>
        
    <!-- copies core libraries over to processing build -->
    <target name="copylibs" depends="makelibs">
        <!-- default target is work folder, can be overridden by call -->
        <property name="target" value="work"/>
        <!-- delete contents of libraries folder -->
        <delete includeemptydirs="true">
            <fileset defaultexcludes="no" dir="processing/build/macosx/${target}/libraries" includes="**/*" excludes="howto.txt"/>
        </delete>
        <!-- copy net library -->
        <antcall target="copylib">
            <param name="libname" value="net"/>
        </antcall>
        <!-- copy sound library -->
        <antcall target="copylib">
            <param name="libname" value="sound"/>
        </antcall>
        <!-- copy handset library -->
        <antcall target="copylib">
            <param name="libname" value="handset"/>
        </antcall>
    </target>
</project>
